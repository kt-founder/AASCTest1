const axios = require("axios");
const { saveToken, callBitrix } = require("../services/bitrix.service");
require("dotenv").config();

// Regex ƒë∆°n gi·∫£n cho ki·ªÉm tra email, s·ªë ƒëi·ªán tho·∫°i, website
const EMAIL_REGEX = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
const PHONE_REGEX = /^[0-9]{8,15}$/;
const URL_REGEX = /^https?:\/\/.+$/;
const UF_BANK_FIELD = process.env.UF_BANK_FIELD;
const UF_ACCOUNT_FIELD = process.env.UF_ACCOUNT_FIELD;

// ========== OAuth ==========

exports.handleInstall = async (req, res) => {
  const { AUTH_ID, AUTH_EXPIRES, REFRESH_ID } = req.body;
  if (!AUTH_ID || !REFRESH_ID) return res.status(400).send("Thi·∫øu token");

  await saveToken({
    access_token: AUTH_ID,
    refresh_token: REFRESH_ID,
    expires_in: parseInt(AUTH_EXPIRES),
  });

  res.send("‚úÖ Nh·∫≠n token t·ª´ Bitrix th√†nh c√¥ng!");
};

exports.handleCallback = async (req, res) => {
  const code = req.query.code;
  try {
    const result = await axios.get("https://oauth.bitrix.info/oauth/token/", {
      params: {
        grant_type: "authorization_code",
        client_id: process.env.BITRIX_CLIENT_ID,
        client_secret: process.env.BITRIX_CLIENT_SECRET,
        redirect_uri: process.env.BITRIX_REDIRECT_URI,
        code,
      },
    });
    await saveToken(result.data);
    res.send("‚úÖ ƒê√£ x√°c th·ª±c OAuth th√†nh c√¥ng!");
  } catch (e) {
    console.error("‚ùå Callback th·∫•t b·∫°i:", e.response?.data || e.message);
    res.status(500).send("‚ùå Callback th·∫•t b·∫°i");
  }
};

exports.testApi = async (req, res) => {
  try {
    console.log("üî• G·ªçi testApi");
    const data = await callBitrix("user.current");
    console.log("‚úÖ testApi th√†nh c√¥ng");
    res.json(data);
  } catch (e) {
    console.error("‚ùå L·ªói khi g·ªçi Bitrix API:", e.response?.data || e.message);
    res.status(500).send(e.message || "L·ªói g·ªçi API");
  }
};

// ========== CRUD Li√™n h·ªá ==========

exports.getContacts = async (req, res) => {
  try {
    // 1. L·∫•y danh s√°ch li√™n h·ªá
    const data = await callBitrix("crm.contact.list", {
      select: ["ID", "NAME", "LAST_NAME", "EMAIL", "PHONE", "ADDRESS","ADDRESS_REGION","ADDRESS_CITY","ADDRESS_PROVINCE","ADDRESS_COUNTRY", "WEB"],
    });

    const contacts = data.result;
    const contactIds = contacts.map(contact => contact.ID);

    // 2. L·∫•y danh s√°ch requisites c·ªßa c√°c li√™n h·ªá
    const requisiteData = await callBitrix("crm.requisite.list", {
      filter: {
        ENTITY_TYPE_ID: 3, // 3 l√† Contact
        ENTITY_ID: contactIds,
      }
    });

    const requisites = requisiteData.result;

    // 3. L·∫•y to√†n b·ªô bank detail t·ª´ c√°c requisites
    const requisiteIds = requisites.map(r => r.ID);

    const bankDetailsData = await callBitrix("crm.requisite.bankdetail.list", {
      filter: {
        ENTITY_ID: requisiteIds,
      }
    });

    const bankDetails = bankDetailsData.result;

    // 4. Mapping: Contact -> Requisite -> BankDetail
    const enrichedData = contacts.map(contact => {
      const contactRequisite = requisites.find(r => r.ENTITY_ID === contact.ID);
      const bankDetailsForRequisite = contactRequisite
    ? bankDetails.filter(b => b.ENTITY_ID === contactRequisite.ID) // L·∫•y t·∫•t c·∫£ c√°c bankDetails
    : [];
    const banks = bankDetailsForRequisite.map(bank => ({
      BANK_ID: bank.ID,
      BANK_NAME: bank.RQ_BANK_NAME,
      BANK_ACCOUNT: bank.RQ_ACC_NUM,
    }));

    return {
      ...contact,
      BANKS: banks.length > 0 ? banks : null,  // N·∫øu c√≥ ng√¢n h√†ng, tr·∫£ v·ªÅ m·∫£ng, n·∫øu kh√¥ng tr·∫£ v·ªÅ null
    };
    });

    res.json(enrichedData);
  } catch (e) {
    console.error("‚ùå L·ªói khi l·∫•y danh s√°ch li√™n h·ªá v√† th√¥ng tin ng√¢n h√†ng:", e.response?.data || e.message);
    res.status(500).send(e.message || "L·ªói khi l·∫•y danh s√°ch li√™n h·ªá");
  }
};


exports.addContact = async (req, res) => {
  try {
    const {
      NAME,
      LAST_NAME,
      EMAIL = [],
      PHONE = [],
      WEB = [],
      ADDRESS,
      ADDRESS_COUNTRY,
      ADDRESS_PROVINCE,
      ADDRESS_CITY,
      ADDRESS_REGION,
      BANKS = [], // M·∫£ng ch·ª©a th√¥ng tin ng√¢n h√†ng
    } = req.body;

    // Chuy·ªÉn ƒë·ªïi m·∫£ng ƒë·ªÉ ph√π h·ª£p ƒë·ªãnh d·∫°ng Bitrix
    const normalize = (list) =>
      list
        .filter((item) => !item.DELETE) // b·ªè c√°c item ƒë√£ ƒë√°nh xo√°
        .map(({ VALUE, VALUE_TYPE }) => ({
          VALUE,
          VALUE_TYPE: VALUE_TYPE || "WORK",
        }));

    // Ti·∫øn h√†nh th√™m li√™n h·ªá
    const contactData = await callBitrix("crm.contact.add", {
      fields: {
        NAME,
        LAST_NAME,
        EMAIL: normalize(EMAIL),
        PHONE: normalize(PHONE),
        WEB: normalize(WEB),
        ADDRESS,
        ADDRESS_COUNTRY,
        ADDRESS_PROVINCE,
        ADDRESS_CITY,
        ADDRESS_REGION,
      },
    });
    const contactId = contactData.result; // L·∫•y CONTACT_ID t·ª´ li√™n h·ªá v·ª´a t·∫°o

    // Ki·ªÉm tra xem c√≥ Requisite ch∆∞a, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi
    const requisiteData = await callBitrix("crm.requisite.list", {
      filter: {
        ENTITY_ID: contactId, // Ki·ªÉm tra n·∫øu ƒë√£ c√≥ requisite cho contact
        ENTITY_TYPE_ID: 3,    // 3 l√† ID c·ªßa ƒë·ªëi t∆∞·ª£ng Contact
      },
    });

    let requisiteId;
    if (requisiteData.result.length === 0) {
      // N·∫øu kh√¥ng c√≥, t·∫°o m·ªõi Requisite
      const newRequisiteData = await callBitrix("crm.requisite.add", {
        fields: {
          ENTITY_TYPE_ID: 3,  // ID c·ªßa ƒë·ªëi t∆∞·ª£ng Contact
          ENTITY_ID: contactId,  // Li√™n k·∫øt v·ªõi CONTACT_ID c·ªßa li√™n h·ªá v·ª´a t·∫°o
          PRESET_ID: 1,        // Preset ID c·ªßa Requisite
          NAME: "BANK",
        },
      });
      requisiteId = newRequisiteData.result;
    } else {
      // N·∫øu c√≥, l·∫•y ID c·ªßa Requisite
      requisiteId = requisiteData.result[0].ID;
    }

    // Ti·∫øn h√†nh th√™m th√¥ng tin ng√¢n h√†ng v√†o Requisite Bank Detail
    const bankDetails = [];
    for (const bank of BANKS) {
      const bankDetail = await callBitrix("crm.requisite.bankdetail.add", {
        fields: {
          ENTITY_ID: requisiteId, // Li√™n k·∫øt v·ªõi Requisite
          NAME:"BANK",
          RQ_BANK_NAME: bank.BANK_NAME,
          RQ_ACC_NUM: bank.BANK_ACCOUNT,
        },
      });
      bankDetails.push(bankDetail.result);
    }

    res.json({ contactId, requisiteId, bankDetails });
  } catch (e) {
    console.error("‚ùå L·ªói khi th√™m li√™n h·ªá v√† th√¥ng tin ng√¢n h√†ng:", e.response?.data || e.message);
    res.status(500).send(e.message || "L·ªói khi th√™m li√™n h·ªá v√† th√¥ng tin ng√¢n h√†ng");
  }
};

exports.updateContact = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      NAME,
      LAST_NAME,
      EMAIL = [],
      PHONE = [],
      WEB = [],
      ADDRESS,
      ADDRESS_COUNTRY,
      ADDRESS_PROVINCE,
      ADDRESS_CITY,
      ADDRESS_REGION,
      BANKS = [],
    } = req.body;
    console.log("üîπ Payload nh·∫≠n ƒë∆∞·ª£c:", req.body);

    const cleanField = (list) =>
      list.map((item) => {
        if (item.DELETE === 'Y') return { ID: item.ID, DELETE: 'Y' };
        const obj = { VALUE: item.VALUE };
        if (item.ID) obj.ID = item.ID;
        if (item.VALUE_TYPE) obj.VALUE_TYPE = item.VALUE_TYPE;
        return obj;
      });

    console.log("üîπ ƒêang c·∫≠p nh·∫≠t th√¥ng tin li√™n h·ªá...");
    const data = await callBitrix("crm.contact.update", {
      id,
      fields: {
        NAME,
        LAST_NAME,
        EMAIL: cleanField(EMAIL),
        PHONE: cleanField(PHONE),
        WEB: cleanField(WEB),
        ADDRESS,
        ADDRESS_COUNTRY,
        ADDRESS_PROVINCE,
        ADDRESS_CITY,
        ADDRESS_REGION,
      }
    });
    console.log("‚úÖ C·∫≠p nh·∫≠t li√™n h·ªá th√†nh c√¥ng:", data);

    console.log("üîπ L·∫•y danh s√°ch Requisite li√™n quan ƒë·∫øn Contact ID:", id);
    const requisiteData = await callBitrix("crm.requisite.list", {
      filter: {
        ENTITY_ID: id,
        ENTITY_TYPE_ID: 3,
      },
    });

    if (requisiteData.result.length === 0) {
      console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Requisite.");
      return res.status(400).send("Kh√¥ng t√¨m th·∫•y Requisite cho li√™n h·ªá n√†y.");
    }

    const requisiteId = requisiteData.result[0].ID;
    console.log("‚úÖ L·∫•y Requisite ID:", requisiteId);

    const bankDetails = [];
    for (const bank of BANKS) {
      console.log("üîπ X·ª≠ l√Ω ng√¢n h√†ng:", bank);
      if (bank.ID) {
        if (bank.DELETE === 'Y') {
          console.log("üóëÔ∏è ƒêang x√≥a ng√¢n h√†ng ID:", bank.ID);
          const result = await callBitrix('crm.requisite.bankdetail.delete', {
            id: bank.ID,
          });
          console.log("‚úÖ ƒê√£ x√≥a:", result);
          bankDetails.push({ ID: bank.ID, deleted: true });
        } else {
          console.log("‚úèÔ∏è ƒêang c·∫≠p nh·∫≠t ng√¢n h√†ng ID:", bank.ID);
          const result = await callBitrix('crm.requisite.bankdetail.update', {
            id: bank.ID,
            fields: {
              RQ_BANK_NAME: bank.BANK_NAME,
              RQ_ACC_NUM: bank.BANK_ACCOUNT,
            }
          });
          console.log("‚úÖ C·∫≠p nh·∫≠t ng√¢n h√†ng th√†nh c√¥ng:", result);
          bankDetails.push({ ID: bank.ID, updated: true });
        }
      } else {
        console.log("‚ûï Th√™m m·ªõi th√¥ng tin ng√¢n h√†ng:", bank);
        const result = await callBitrix('crm.requisite.bankdetail.add', {
          fields: {
            ENTITY_ID: requisiteId,
            NAME: "BANK",
            RQ_BANK_NAME: bank.BANK_NAME,
            RQ_ACC_NUM: bank.BANK_ACCOUNT,
          }
        });
        console.log("‚úÖ Th√™m ng√¢n h√†ng th√†nh c√¥ng:", result);
        bankDetails.push(result.result);
      }
    }

    res.json({ result: data, bankDetails });
  } catch (e) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t li√™n h·ªá v√† ng√¢n h√†ng:", e.response?.data || e.message);
    res.status(500).send(e.message || "L·ªói khi c·∫≠p nh·∫≠t li√™n h·ªá v√† ng√¢n h√†ng");
  }
};



exports.deleteContact = async (req, res) => {
  try {
    const id = req.params.id;
    console.log("üîπ B·∫Øt ƒë·∫ßu xo√° li√™n h·ªá v·ªõi ID:", id);

    // X√≥a th√¥ng tin li√™n h·ªá
    const data = await callBitrix("crm.contact.delete", { id });
    console.log("‚úÖ Xo√° li√™n h·ªá th√†nh c√¥ng:", data);
  } catch (e) {
    console.error("‚ùå L·ªói khi xo√° li√™n h·ªá v√† th√¥ng tin ng√¢n h√†ng:", e.response?.data || e.message);
    res.status(500).send(e.message || "L·ªói khi xo√° li√™n h·ªá v√† th√¥ng tin ng√¢n h√†ng");
  }
};
